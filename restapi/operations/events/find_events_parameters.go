// Code generated by go-swagger; DO NOT EDIT.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewFindEventsParams creates a new FindEventsParams object
// no default values defined in spec.
func NewFindEventsParams() FindEventsParams {

	return FindEventsParams{}
}

// FindEventsParams contains all the bound params for the find events operation
// typically these are obtained from a http.Request
//
// swagger:parameters findEvents
type FindEventsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: query
	*/
	End *strfmt.DateTime
	/*
	  In: query
	*/
	Start *strfmt.DateTime
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewFindEventsParams() beforehand.
func (o *FindEventsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qEnd, qhkEnd, _ := qs.GetOK("end")
	if err := o.bindEnd(qEnd, qhkEnd, route.Formats); err != nil {
		res = append(res, err)
	}

	qStart, qhkStart, _ := qs.GetOK("start")
	if err := o.bindStart(qStart, qhkStart, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindEnd binds and validates parameter End from query.
func (o *FindEventsParams) bindEnd(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("end", "query", "strfmt.DateTime", raw)
	}
	o.End = (value.(*strfmt.DateTime))

	if err := o.validateEnd(formats); err != nil {
		return err
	}

	return nil
}

// validateEnd carries on validations for parameter End
func (o *FindEventsParams) validateEnd(formats strfmt.Registry) error {

	if err := validate.FormatOf("end", "query", "date-time", o.End.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindStart binds and validates parameter Start from query.
func (o *FindEventsParams) bindStart(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("start", "query", "strfmt.DateTime", raw)
	}
	o.Start = (value.(*strfmt.DateTime))

	if err := o.validateStart(formats); err != nil {
		return err
	}

	return nil
}

// validateStart carries on validations for parameter Start
func (o *FindEventsParams) validateStart(formats strfmt.Registry) error {

	if err := validate.FormatOf("start", "query", "date-time", o.Start.String(), formats); err != nil {
		return err
	}
	return nil
}
