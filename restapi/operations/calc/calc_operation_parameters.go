// Code generated by go-swagger; DO NOT EDIT.

package calc

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewCalcOperationParams creates a new CalcOperationParams object
// no default values defined in spec.
func NewCalcOperationParams() CalcOperationParams {

	return CalcOperationParams{}
}

// CalcOperationParams contains all the bound params for the calc operation operation
// typically these are obtained from a http.Request
//
// swagger:parameters calcOperation
type CalcOperationParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: path
	*/
	Args []int64
	/*
	  Required: true
	  Pattern: ^(add|sub|multi|div|sqrt|cbrt|pow|fac)$
	  In: path
	*/
	Operation string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewCalcOperationParams() beforehand.
func (o *CalcOperationParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	rArgs, rhkArgs, _ := route.Params.GetOK("args")
	if err := o.bindArgs(rArgs, rhkArgs, route.Formats); err != nil {
		res = append(res, err)
	}

	rOperation, rhkOperation, _ := route.Params.GetOK("operation")
	if err := o.bindOperation(rOperation, rhkOperation, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindArgs binds and validates array parameter Args from path.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *CalcOperationParams) bindArgs(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("args", "path")
	}

	var qvArgs string
	if len(rawData) > 0 {
		qvArgs = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	argsIC := swag.SplitByFormat(qvArgs, "")

	if len(argsIC) == 0 {
		return errors.Required("args", "path")
	}

	var argsIR []int64
	for i, argsIV := range argsIC {
		// items.Format: "int64"
		argsI, err := swag.ConvertInt64(argsIV)
		if err != nil {
			return errors.InvalidType(fmt.Sprintf("%s.%v", "args", i), "path", "int64", argsI)
		}

		argsIR = append(argsIR, argsI)
	}

	o.Args = argsIR

	return nil
}

// bindOperation binds and validates parameter Operation from path.
func (o *CalcOperationParams) bindOperation(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.Operation = raw

	if err := o.validateOperation(formats); err != nil {
		return err
	}

	return nil
}

// validateOperation carries on validations for parameter Operation
func (o *CalcOperationParams) validateOperation(formats strfmt.Registry) error {

	if err := validate.Pattern("operation", "path", o.Operation, `^(add|sub|multi|div|sqrt|cbrt|pow|fac)$`); err != nil {
		return err
	}

	return nil
}
