// Code generated by go-swagger; DO NOT EDIT.

package calc

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CalcOperationHandlerFunc turns a function with the right signature into a calc operation handler
type CalcOperationHandlerFunc func(CalcOperationParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn CalcOperationHandlerFunc) Handle(params CalcOperationParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// CalcOperationHandler interface for that can handle valid calc operation params
type CalcOperationHandler interface {
	Handle(CalcOperationParams, interface{}) middleware.Responder
}

// NewCalcOperation creates a new http.Handler for the calc operation operation
func NewCalcOperation(ctx *middleware.Context, handler CalcOperationHandler) *CalcOperation {
	return &CalcOperation{Context: ctx, Handler: handler}
}

/*CalcOperation swagger:route GET /calc/{operation}/{args} calc calcOperation

Performs mathematical computations

Operation would either be: <ol><li>Add - `add` </li> <li>Subtract - `sub`</li><li>Multiply - `multi`</li><li>Divide - `div`</li><li>Square root - `sqrt`</li><li>Qubic root - `cbrt`</li><li>Power - `pow`</li><li>Factorial - `fac`</li><ol>

*/
type CalcOperation struct {
	Context *middleware.Context
	Handler CalcOperationHandler
}

func (o *CalcOperation) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCalcOperationParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
